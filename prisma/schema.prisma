// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"] // updated to new name
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================
// ENUMS
// ===================

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum ReportStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  FLAGGED
  COMPLETED
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum RetrainStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ProductionStage {
  CANARY
  PRODUCTION
  STAGING
}

enum SLATaskStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  ESCALATED
  CLOSED
}

// ===================
// MODELS
// ===================

model User {
  id             String      @id @default(uuid())
  email          String      @unique
  password       String?
  name           String?
  role           Role        @default(USER)
  createdAt      DateTime    @default(now())
  lastLoginAt    DateTime?
  customerId     String?     @unique

  projects          Project[]
  reports           Report[]
  pdfExports        PdfExport[]
  moderationActions ModerationAction[]  @relation("ModeratorActions")
  aiAssistLogs      AIAssistLog[]
  aiFeedbacks       AIFeedback[]
  customers         Customer?   @relation(fields: [customerId], references: [id])
}

model Customer {
  id               String    @id @default(uuid())
  userId           String    @unique
  stripeCustomerId String    @unique
  createdAt        DateTime  @default(now())

  user          User          @relation(fields: [userId], references: [id])
  subscriptions Subscription[]
  invoices      Invoice[]
}

model Subscription {
  id                   String             @id @default(uuid())
  customerId           String
  stripeSubscriptionId String             @unique
  plan                 String
  status               SubscriptionStatus
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())

  customer Customer @relation(fields: [customerId], references: [id])
  invoices Invoice[]
}

model Project {
  id          String    @id @default(uuid())
  userId      String
  title       String
  description String?
  location    String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  user      User       @relation(fields: [userId], references: [id])
  permits   Permit[]
  reports   Report[]
}

model Permit {
  id                 String   @id @default(uuid())
  projectId          String
  jurisdiction       String
  permitType         String
  description        String?
  fees               Float?
  estimatedTimeline  String?
  status             String   @default("pending")
  createdAt          DateTime @default(now())
  updatedAt          DateTime?
  reportId           String?

  project Project @relation(fields: [projectId], references: [id])
  report  Report? @relation(fields: [reportId], references: [id])
}

model Report {
  id          String       @id @default(uuid())
  projectId   String?
  userId      String
  title       String?
  address     String?
  description String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?

  project           Project?           @relation(fields: [projectId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  pdfExports        PdfExport[]
  moderationActions ModerationAction[]
  aiAssistLogs      AIAssistLog[]
  aiFeedbacks       AIFeedback[]
  permits           Permit[]           @relation("ReportPermits")
  slaTasks          SLATask[]
}

model PdfExport {
  id        String   @id @default(uuid())
  reportId  String
  userId    String
  fileUrl   String
  storageKey String?
  createdAt DateTime @default(now())

  report Report @relation(fields: [reportId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model ModerationAction {
  id              String   @id @default(uuid())
  reportId        String
  adminUserId     String
  action          String
  note            String?
  overrideContent String?
  createdAt       DateTime @default(now())

  report    Report @relation(fields: [reportId], references: [id])
  adminUser User   @relation("ModeratorActions", fields: [adminUserId], references: [id])
}

model AIAssistLog {
  id                String   @id @default(uuid())
  reportId          String
  moderatorId       String?
  suggestedCategory String?
  confidence        Float?
  rationale         String?
  modelVersion      String?
  slaUrgency        String?
  createdAt         DateTime @default(now())

  report    Report @relation(fields: [reportId], references: [id])
  moderator User?  @relation(fields: [moderatorId], references: [id])
}

model AIFeedback {
  id          String   @id @default(uuid())
  reportId    String
  suggestionId String?
  accepted    Boolean
  comments    String?
  moderatorId String?
  category    String?
  confidence  Float?
  createdAt   DateTime @default(now())

  report    Report @relation(fields: [reportId], references: [id])
  moderator User?  @relation(fields: [moderatorId], references: [id])
}

model AITrainingExample {
  id           String   @id @default(cuid())
  reportId     String
  suggestionId String?
  moderatorId  String?
  accepted     Boolean
  comments     String?
  category     String?
  confidence   Float?
  createdAt    DateTime @default(now())
  reviewedAt   DateTime?
  usedInJobId  String?

  report    Report @relation(fields: [reportId], references: [id])
  moderator User?  @relation(fields: [moderatorId], references: [id])
}

model RetrainJob {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  triggeredBy String?
  status      RetrainStatus @default(QUEUED)
  priority    Int          @default(0)
  sampleCount Int          @default(0)
  metadata    Json?
  startedAt   DateTime?
  finishedAt  DateTime?
  error       String?
  validation  Json?
  promoted    Boolean?     @default(false)
}

model ProductionModel {
  id           String          @id @default(cuid())
  modelVersion String          @unique
  stage        ProductionStage
  deployedBy   String?
  deployedAt   DateTime @default(now())
  metadata     Json?
}

model ForecastLog {
  id          String   @id @default(cuid())
  triggeredAt DateTime @default(now())
  timeframe   String?
  results     Json
  createdBy   String?
  createdAt   DateTime @default(now())

  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
}

model SLATask {
  id           String       @id @default(cuid())
  reportId     String?
  title        String
  description  String?
  priority     Int?
  dueAt        DateTime?
  assignedTeam String?
  assignedUserId String?
  status       SLATaskStatus @default(OPEN)
  type         String?
  createdAt    DateTime      @default(now())
  closedAt     DateTime?

  report   Report? @relation(fields: [reportId], references: [id])
  assignee User?   @relation(fields: [assignedUserId], references: [id])
}

model SLASettings {
  id        String   @id @default(cuid())
  category  String
  threshold Int
  teamId    String?
  createdAt DateTime @default(now())
}

model Audit {
  id        String   @id @default(cuid())
  action    String
  actor     String?
  detail    Json?
  createdAt DateTime @default(now())

  userId String?
  user   User? @relation(fields: [userId], references: [id])
}

model KeyValue {
  id    String  @id @default(cuid())
  key   String  @unique
  value String?
}

model FormSubmission {
  id                 String   @id @default(cuid())
  type               String
  applicantName      String
  address            String
  phone              String
  email              String
  projectDescription String?
  serviceAmperage    Int?
  fixtures           Int?
  equipmentType      String?
  btuRating          Int?
  squareFootage      Int?
  estimatedValue     Int?
  contractorName     String
  contractorLicense  String
  createdAt          DateTime @default(now())
}

model Invoice {
  id               String   @id @default(uuid())
  customerId       String
  subscriptionId   String?
  stripeInvoiceId  String   @unique
  amountTotal      Int?
  currency         String?
  status           String?
  hostedInvoiceUrl String?
  s3Key            String?
  createdAt        DateTime @default(now())

  customer     Customer     @relation(fields: [customerId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
}
