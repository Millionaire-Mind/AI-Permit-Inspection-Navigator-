generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum SLATaskStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  ESCALATED
  CLOSED
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  password           String
  name               String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  role               Role     @default(USER)
  customerId         String?  @unique
  subscriptionStatus String?  @default("inactive")

  // Relations (unidirectional to avoid complex cycles)
  aiTrainingExamples AITrainingExample[] @relation("UserAITrainingExamples")
  Project            Project[]
}

model Customer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())

  subscriptions Subscription[]
  invoices      Invoice[]
}

model Subscription {
  id                   String             @id @default(uuid())
  customerId           String
  stripeSubscriptionId String             @unique
  plan                 String
  status               SubscriptionStatus
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())

  invoices Invoice[]
  Customer Customer  @relation(fields: [customerId], references: [id])
}

model Invoice {
  id               String        @id @default(uuid())
  customerId       String
  subscriptionId   String?
  stripeInvoiceId  String        @unique
  amountTotal      Int?
  currency         String?
  status           String?
  hostedInvoiceUrl String?
  s3Key            String?
  createdAt        DateTime      @default(now())
  Customer         Customer      @relation(fields: [customerId], references: [id])
  Subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
}

model Audit {
  id        String   @id @default(cuid())
  action    String
  actor     String?
  detail    Json?
  createdAt DateTime @default(now())
}

model AITrainingExample {
  id     String @id @default(uuid())
  userId String
  user   User   @relation("UserAITrainingExamples", fields: [userId], references: [id])
}

model Jurisdiction {
  id                 String              @id @default(uuid())
  name               String
  code               String?
  projects           Project[]           @relation("JurisdictionProjects")
  permitTypes        PermitType[]
  permitRequirements PermitRequirement[] @relation("JurisdictionPermitRequirements")
}

model Project {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  name           String?
  title          String? // backward-compat
  description    String?
  address        String?
  location       String?
  status         String       @default("active")
  valuation      Int?
  sqft           Int?
  scope          String?
  params         Json?
  jurisdiction   Jurisdiction @relation("JurisdictionProjects", fields: [jurisdictionId], references: [id])
  jurisdictionId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?

  permits Permit[]
}

model Permit {
  id                String    @id @default(uuid())
  project           Project   @relation(fields: [projectId], references: [id])
  projectId         String
  jurisdiction      String
  permitType        String
  description       String?
  fees              Float?
  estimatedTimeline String?
  status            String    @default("pending")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?
}

model PermitType {
  id             String       @id @default(uuid())
  name           String
  jurisdictionId String
  jurisdiction   Jurisdiction @relation(fields: [jurisdictionId], references: [id])
}

model PermitRequirement {
  id             String       @id @default(uuid())
  jurisdictionId String
  jurisdiction   Jurisdiction @relation("JurisdictionPermitRequirements", fields: [jurisdictionId], references: [id])
  rule           String?
  criteria       Json?
  permitTypeId   String?
}

model ForecastLog {
  id          String   @id @default(cuid())
  triggeredAt DateTime @default(now())
  results     Json
}

model AlertRule {
  id          String   @id @default(uuid())
  scope       String   @default("global")
  scopeRef    String?
  kind        String   @default("forecast_spike")
  threshold   Float    @default(0.2)
  windowHours Int      @default(24)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model SLATask {
  id             String        @id @default(cuid())
  reportId       String?
  title          String
  description    String?
  priority       Int?
  dueAt          DateTime?
  assignedTeam   String?
  assignedUserId String?
  status         SLATaskStatus @default(OPEN)
  type           String?
  createdAt      DateTime      @default(now())
  closedAt       DateTime?
}

model SLASettings {
  id        String   @id @default(cuid())
  category  String
  threshold Int
  teamId    String?
  createdAt DateTime @default(now())
}
