generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())

  audits     Audit[] @relation("ActorAudits")
  actorUser  Audit[] @relation("ActorUser")
  // Phase 1 relations
  reports    Report[]
  pdfExports PdfExport[]
}

model Audit {
  id      String  @id @default(uuid())
  actorId String
  actor   User    @relation("ActorAudits", fields: [actorId], references: [id])
  userId  String?
  user    User?   @relation("ActorUser", fields: [userId], references: [id])
}

// Phase 1 core entities
model Report {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  address   String?
  status    String   @default("pending")
  createdAt DateTime @default(now())

  pdfExports PdfExport[]
}

model PdfExport {
  id        String   @id @default(uuid())
  reportId  String
  report    Report   @relation(fields: [reportId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  fileUrl   String
  createdAt DateTime @default(now())
}

// Phase 2 moderation assistance
model AIAssistLog {
  id                String   @id @default(uuid())
  appealId          String
  moderatorId       String
  suggestedCategory String
  confidence        Float
  rationale         String
  slaUrgency        String   @default("medium")
  createdAt         DateTime @default(now())
}

model ModerationAction {
  id          String   @id @default(uuid())
  reportId    String
  adminUserId String
  action      String
  note        String?
  createdAt   DateTime @default(now())
}

// Phase 3 feedback and retraining
model AIFeedback {
  id           String   @id @default(uuid())
  appealId     String
  suggestionId String?
  accepted     Boolean
  comments     String?
  moderatorId  String
  category     String?
  confidence   Float?
  createdAt    DateTime @default(now())
}

model AITrainingExample {
  id           String   @id @default(uuid())
  appealId     String
  suggestionId String?
  moderatorId  String
  accepted     Boolean
  comments     String?
  category     String?
  confidence   Float?
  createdAt    DateTime @default(now())
  reviewedAt   DateTime?
  usedInJobId  String?
}

model RetrainJob {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  triggeredBy String?
  status      String   @default("queued")
  priority    Int      @default(0)
  sampleCount Int      @default(0)
  metadata    Json?
  startedAt   DateTime?
  finishedAt  DateTime?
  error       String?
}

model Jurisdiction {
  id                 String              @id @default(uuid())
  name               String
  projects           Project[]           @relation("JurisdictionProjects")
  permitTypes        PermitType[]
  permitRequirements PermitRequirement[] @relation("JurisdictionPermitRequirements")
}

model Project {
  id             String       @id @default(uuid())
  jurisdictionId String
  jurisdiction   Jurisdiction @relation("JurisdictionProjects", fields: [jurisdictionId], references: [id])
  // add other fields here
}

model PermitRequirement {
  id             String       @id @default(uuid())
  jurisdictionId String
  jurisdiction   Jurisdiction @relation("JurisdictionPermitRequirements", fields: [jurisdictionId], references: [id])
  // add other fields here
}

model PermitType {
  id             String       @id @default(uuid())
  jurisdictionId String
  jurisdiction   Jurisdiction @relation(fields: [jurisdictionId], references: [id])
}

model AlertRule {
  id          String   @id @default(uuid())
  scope       String   @default("global")
  scopeRef    String?
  kind        String   @default("forecast_spike")
  threshold   Float    @default(0.2)
  windowHours Int      @default(24)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
}
